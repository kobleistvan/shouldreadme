// Generated by CoffeeScript 1.4.0
(function() {

  window.test = {
    views: {
      SubView: Backbone.View.extend({
        className: 'sub-view'
      }),
      SubViewWithEvents: Backbone.View.extend({
        className: 'sub-view',
        events: {
          click: function() {
            return this.$el.html('clicked');
          }
        }
      }),
      SubViewExpectingTemplate: Backbone.View.extend({
        className: 'sub-view',
        template: Handlebars.compile('text'),
        render: function() {
          return this.$el.html(this.template(this.model));
        }
      }),
      SubViewWithModel: Backbone.View.extend({
        className: 'sub-view',
        render: function() {
          return this.$el.html(this.model);
        }
      }),
      SubViewWithModelNames: Backbone.View.extend({
        render: function() {
          return this.$el.html(this.model.get('name'));
        }
      })
    }
  };

  describe("Backbone.Handlebars", function() {
    var renderView, _view;
    _view = null;
    afterEach(function() {
      if (_view) {
        _view.remove();
      }
      return _view = null;
    });
    renderView = function(template, context) {
      var customViewClass;
      if (template == null) {
        template = '';
      }
      if (context == null) {
        context = {};
      }
      customViewClass = Backbone.View.extend({
        template: typeof template === 'function' ? template : Handlebars.compile(template),
        initialize: function() {
          return this.renderTemplate(context);
        }
      });
      return _view = new customViewClass;
    };
    describe("View#render", function() {
      it("doesn't render anything if there isn't a template", function() {
        var view;
        view = new Backbone.View;
        view.render();
        return view.$el.html().should.eql('');
      });
      it("renders view template by default", function() {
        var view, viewClass;
        viewClass = Backbone.View.extend({
          template: Handlebars.compile('template text')
        });
        view = new viewClass;
        view.render();
        return view.$el.html().should.eql('template text');
      });
      it("takes the context from templateData method", function() {
        var view, viewClass;
        viewClass = Backbone.View.extend({
          template: Handlebars.compile('Hi {{name}}'),
          templateData: function() {
            return {
              name: 'there'
            };
          }
        });
        view = new viewClass;
        view.render();
        return view.$el.html().should.eql('Hi there');
      });
      it("can use templateData directly if is not a method", function() {
        var view, viewClass;
        viewClass = Backbone.View.extend({
          template: Handlebars.compile('Hi {{name}}'),
          templateData: {
            name: 'there'
          }
        });
        view = new viewClass;
        view.render();
        return view.$el.html().should.eql('Hi there');
      });
      return it("returns reference to the view", function() {
        var view;
        view = new Backbone.View;
        return view.render().should.eql(view);
      });
    });
    describe("View#renderTemplate", function() {
      it("renders the template of the view", function() {
        var view;
        view = renderView('template text');
        return view.$el.html().should.eql('template text');
      });
      it("accepts template context as argument", function() {
        var view;
        view = renderView('{{a}} + {{b}} = {{c}}', {
          a: 1,
          b: 2,
          c: 3
        });
        return view.$el.html().should.eql('1 + 2 = 3');
      });
      return it("returns the view", function() {
        var view;
        view = renderView();
        return view.renderTemplate().should.eql(view);
      });
    });
    describe("View#renderTemplate with {{view}} helper", function() {
      it("renders sub-view element", function() {
        var view;
        view = renderView('{{view "test.views.SubView"}}');
        return view.$('.sub-view').should.not.be["null"];
      });
      it("works with precompiled templates", function() {
        var view;
        view = renderView(Handlebars.compile('{{view  "test.views.SubView"}}'));
        return view.$('.sub-view').should.not.be["null"];
      });
      it("keeps the events of the sub-view", function() {
        var subViewEl, view;
        view = renderView('{{view "test.views.SubViewWithEvents"}}');
        subViewEl = view.$('.sub-view');
        subViewEl.click();
        return subViewEl.html().should.eql('clicked');
      });
      it("can render several sub-views", function() {
        var view;
        view = renderView('{{view "test.views.SubView"}}{{view "test.views.SubView"}}');
        return view.$('.sub-view').length.should.eql(2);
      });
      it("throws an error if sub-view doesn't exists", function() {
        return (function() {
          return renderView('{{view "InvalidView"}}');
        }).should["throw"]('Invalid view name - InvalidView');
      });
      it("can pass options to the sub-view", function() {
        var subViewEl, view;
        view = renderView('{{view "test.views.SubViewWithModel" model=1 tagName="span" className="sview"}}');
        subViewEl = view.$('.sview');
        subViewEl.html().should.eql('1');
        return subViewEl.prop('tagName').toLowerCase().should.eql('span');
      });
      it("can pass a new template for the view", function() {
        var view;
        view = renderView('{{#view "test.views.SubViewExpectingTemplate"}}custom template{{/view}} ');
        return view.$('.sub-view').html().should.eql('custom template');
      });
      it("removes sub-views via view.remove() on re-render", function() {
        var removeCounter, subView, view, _i, _len, _ref;
        view = renderView('{{view "test.views.SubView"}}{{view "test.views.SubView"}}');
        removeCounter = 0;
        _ref = view.renderedSubViews();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subView = _ref[_i];
          subView.remove = function() {
            return removeCounter += 1;
          };
        }
        view.renderTemplate();
        return removeCounter.should.eql(2);
      });
      return it("removes sub-views via view.remove() on view removal", function() {
        var removeCounter, subView, view, _i, _len, _ref;
        view = renderView('{{view "test.views.SubView"}}{{view "test.views.SubView"}}');
        removeCounter = 0;
        _ref = view.renderedSubViews();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subView = _ref[_i];
          subView.remove = function() {
            return removeCounter += 1;
          };
        }
        view.remove();
        return removeCounter.should.eql(2);
      });
    });
    return describe("View#renderTemplate with {{views}} helper", function() {
      it("renders an array of views by given collection of models", function() {
        var view;
        view = renderView('{{views "test.views.SubView" collection}}', {
          collection: [1, 2, 3, 4]
        });
        return view.$('.sub-view').length.should.eql(4);
      });
      it("works with precompiled templates", function() {
        var view;
        view = renderView(Handlebars.compile('{{views "test.views.SubView" collection}}'), {
          collection: [1, 2, 3, 4]
        });
        return view.$('.sub-view').length.should.eql(4);
      });
      it("can pass a new template for the view", function() {
        var view;
        view = renderView('[{{#views "test.views.SubViewExpectingTemplate" collection}}{{this}}{{/views}}]', {
          collection: [1, 2, 3, 4]
        });
        return view.$el.text().should.eql('[1234]');
      });
      it("can pass options to the sub-view", function() {
        var view;
        view = renderView('{{views "test.views.SubViewWithModel" collection className="inner-view"}}', {
          collection: [1, 2, 3, 4]
        });
        return view.$('.inner-view').length.should.eql(4);
      });
      it("can render Backbone.Collection instances", function() {
        var collection, view;
        collection = new Backbone.Collection;
        collection.add({
          name: '1'
        });
        collection.add({
          name: '2'
        });
        view = renderView('[{{views "test.views.SubViewWithModelNames" collection}}]', {
          collection: collection
        });
        return view.$el.text().should.eql('[12]');
      });
      return it("can render any object which implements map", function() {
        var object, view;
        object = {
          values: [1, 2],
          map: function(callback) {
            return _.map(this.values, callback);
          }
        };
        view = renderView('[{{views "test.views.SubViewWithModel" collection}}]', {
          collection: object
        });
        return view.$el.text().should.eql('[12]');
      });
    });
  });

}).call(this);
